// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User {
//   id           String        @id @default(auto()) @map("_id") @db.ObjectId
//   phone        String        @unique
//   name         String?
//   avatar       String?
//   activated    Boolean?      @default(false)
//   created_at   DateTime      @default(now())
//   updated_at   DateTime      @default(now())
//   refreshTokens RefreshToken[]
//   rooms         Room[]       @relation("UserRooms")
//   speakingRooms Room[]       @relation("RoomSpeakers", references: [id])
// }

// model RefreshToken {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   token      String   @unique
//   user       User     @relation(fields: [userId], references: [id])
//   userId     String   @db.ObjectId
//   created_at DateTime @default(now())

//   // Unique constraint on `token` to prevent duplicates
//   // Index for efficient filtering by `userId`
//   @@index([userId])
// }

// model Room {
//   id        String    @id @default(auto()) @map("_id") @db.ObjectId
//   topic     String
//   roomType  String
//   owner     User     @relation("UserRooms", fields: [ownerId], references: [id])
//   ownerId   String   @db.ObjectId
//   speakers  User[]    @relation("RoomSpeakers")
// }

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  phone         String       @unique
  name          String?
  avatar        String?
  activated     Boolean?     @default(false)
  created_at    DateTime     @default(now())
  updated_at    DateTime     @default(now())
  refreshTokens RefreshToken[]
  rooms         Room[]       @relation("UserRooms")
  speakingRooms RoomSpeaker[]
}

model RefreshToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  created_at DateTime @default(now())

  // Unique constraint on `token` to prevent duplicates
  // Index for efficient filtering by `userId`
  @@index([userId])
}

model Room {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  topic     String
  roomType  String
  owner     User          @relation("UserRooms", fields: [ownerId], references: [id])
  ownerId   String        @db.ObjectId
  speakers  RoomSpeaker[]
}

model RoomSpeaker {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  room    Room   @relation(fields: [roomId], references: [id])
  roomId  String @db.ObjectId

  // Optional: Add unique constraint to prevent duplicate entries for the same user and room
  @@unique([userId, roomId])
}
